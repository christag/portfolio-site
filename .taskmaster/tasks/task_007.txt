# Task ID: 7
# Title: Implement Dynamic Media Detail Page
# Status: pending
# Dependencies: 6
# Priority: high
# Description: Create a dynamic media.html?media={id} page that loads the chosen asset from Strapi and renders it appropriately based on media type (embed, markdown, etc.).
# Details:
1. Create a dynamic route handler for media detail pages
2. Implement API service to fetch single media item by ID from Strapi
3. Build a component switcher based on media type:
```javascript
function MediaRenderer({ media }) {
  switch(media.type) {
    case 'markdown':
      return <MarkdownRenderer content={media.content} />;
    case 'youtube':
      return <YouTubeEmbed embedCode={media.embedCode} />;
    case 'code':
      return <CodeHighlighter code={media.content} language={media.language} />;
    case 'image':
      return <ImageViewer url={media.url} alt={media.title} />;
    case 'audio':
      return <AudioPlayer url={media.url} />;
    default:
      return <GenericRenderer media={media} />;
  }
}
```
4. Implement each renderer component
5. Add social sharing functionality
6. Create "More like this" carousel for related content
7. Implement SEO metadata based on media content
8. Add deep-linking support for sharing specific media

Implementation follows complexity-based ordering:
- Infrastructure & Routing (Foundation): URL structure and data pipeline
- Content Rendering (Core): Display components and SEO foundation
- Enhanced Features (UX): Social connectivity and content discovery
- Advanced Functionality: Navigation enhancement and reliability
- Final Optimization: Cross-device performance

# Test Strategy:
1. Test route handling with various media IDs
2. Verify each renderer component works correctly
3. Test social sharing functionality
4. Validate SEO metadata generation
5. Test responsive layout for different media types
6. Verify deep-linking works correctly
7. Test error handling for invalid media IDs
8. Validate complexity-based implementation order ensures stable foundation before advanced features

# Subtasks:
## 1. Dynamic Routing Setup for Media Detail Pages [pending]
### Dependencies: None
### Description: Implement dynamic routing in Astro to generate a unique detail page for each media item, supporting deep-linking and SEO-friendly URLs.
### Details:
Use Astro's file-based routing with dynamic parameters (e.g., `[slug].astro`). Integrate with Strapi 5 to fetch available media slugs/IDs at build time for static generation or on-demand for SSR. Ensure routes are accessible via direct links and support fallback/error states for non-existent media. Test by navigating to various media detail URLs and verifying correct data loads and 404s are handled.

## 2. Single Media API Integration with Strapi 5 [pending]
### Dependencies: 7.1
### Description: Fetch detailed data for a single media item from Strapi 5, including all relevant fields and relations (e.g., author, tags, related media).
### Details:
Use Astro's server-side code to call Strapi's REST or GraphQL API for the specific media item based on the route parameter. Ensure secure API access, handle authentication if required, and structure queries to minimize over-fetching. Validate and sanitize all received data. Test by mocking API responses and verifying correct data mapping.

## 3. Renderer Components by Media Type [pending]
### Dependencies: 7.2
### Description: Develop modular Astro components to render different media types (image, video, audio, document, etc.) with glassmorphism styling and accessibility compliance.
### Details:
Create a block renderer that maps Strapi media types to Astro components (e.g., ImageRenderer, VideoRenderer). Use modern CSS (e.g., CSS variables, clamp, container queries) and glassmorphism effects (backdrop-filter, semi-transparent backgrounds). Ensure all media is keyboard-accessible, supports alt text/captions, and is responsive. Test each renderer with sample data and accessibility tools.

## 4. SEO Metadata Handling [pending]
### Dependencies: 7.2
### Description: Dynamically generate and inject SEO metadata (title, description, Open Graph, Twitter Card, canonical URL) for each media detail page.
### Details:
Extract SEO fields from Strapi or derive them from media content. Use Astro's <head> injection to set meta tags, structured data (JSON-LD), and canonical links. Ensure Open Graph and Twitter Card images are optimized and accessible. Test with SEO tools (e.g., Lighthouse, Google Rich Results Test) and validate metadata correctness.

## 5. Social Sharing Integration [pending]
### Dependencies: 7.3, 7.4
### Description: Add social sharing buttons for major platforms (Twitter/X, Facebook, LinkedIn, etc.) with dynamic metadata and accessible controls.
### Details:
Implement share buttons using accessible HTML and SVG icons. Dynamically generate share URLs and metadata (title, description, image) from the media data. Use the Web Share API for supported devices. Ensure buttons are keyboard-navigable and screen-reader friendly. Test sharing functionality on all platforms and with accessibility tools.

## 6. Related Content Carousel [pending]
### Dependencies: 7.3
### Description: Display a carousel of related media items, fetched from Strapi based on tags, categories, or editorial curation.
### Details:
Query Strapi for related items using relevant fields. Build a performant, accessible carousel component (e.g., using Swiper.js or custom implementation) with keyboard navigation, ARIA roles, and lazy loading. Apply glassmorphism and punk-meets-professional styling. Test with various numbers of related items and on different devices.

## 7. Deep-Linking and State Preservation [pending]
### Dependencies: 7.1, 7.6
### Description: Ensure all interactive elements (e.g., carousels, tabs, modals) support deep-linking and preserve state via URL parameters or hashes.
### Details:
Implement logic to update the URL when users interact with components (e.g., selecting a carousel slide). On page load, parse URL parameters to restore state. Use the History API for smooth navigation. Test by sharing links to specific states and verifying correct restoration.

## 8. Error Handling and Fallback UI [pending]
### Dependencies: 7.2, 7.3
### Description: Provide robust error handling for API failures, missing media, and invalid routes, with user-friendly fallback UI and logging.
### Details:
Implement try/catch blocks around all API calls. Show clear error messages or fallback components (e.g., 'Media not found', skeleton loaders) as needed. Log errors for monitoring (e.g., Sentry). Ensure error states are accessible and styled consistently. Test by simulating API failures and invalid URLs.

## 9. Responsive and Performance-Optimized Design [pending]
### Dependencies: 7.3, 7.5, 7.6, 7.7, 7.8
### Description: Ensure the media detail page is fully responsive, fast-loading, and visually consistent across devices, with modern CSS and image optimization.
### Details:
Use CSS grid/flexbox, container queries, and fluid typography for layout. Optimize images with Astro's built-in image component and Strapi's media transformations. Implement lazy loading for media and carousels. Test with device emulators, Lighthouse, and real devices for layout, performance, and accessibility.


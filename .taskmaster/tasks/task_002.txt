# Task ID: 2
# Title: Implement Core Layout and Theme Components
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Develop foundational UI components and layouts that properly implement Apple's Liquid Glass design principles with VERY LOW translucency (15-25% opacity), strong backdrop-filter blur (20px), and proper spatial depth. All components must use rounded corners (24px radius), adaptive tinting, and glass materials exclusively - no solid backgrounds. Navigation, footer, typography, and responsive layout system should reflect proper glass layering hierarchy with soft drop shadows, inner highlights, and blending effects between adjacent glass elements. Critical: Use very low opacity values (15-25%) for true transparency, not high opacity (85-95%) which creates opaque panels.
# Details:
1. Set up Tailwind CSS with custom configuration for proper Liquid Glass implementation with 15-25% opacity and strong blur effects
2. Define CSS variables for design tokens supporting Light and Dark themes with proper glass materials:
   - Glass Materials: 15-25% opacity with 20px backdrop-filter blur for containers, 16-20px for buttons
   - Rounded Corners: 24px radius standard for all glass containers
   - Shadows & Highlights: Soft drop shadows and inner highlights for proper depth
   - Adaptive Tinting: Subtle color overlays that respond to content
   - NO solid backgrounds - all separation through glass materials
3. Create layout components:
   - MainLayout.jsx with proper glass layering hierarchy (content → glass controls/containers → overlays)
   - Header/Navigation with proper glass material (15% opacity, 20px blur) and rounded corners
   - Footer with proper glass implementation matching navigation standards (15% opacity)
   - Mobile menu with slightly higher opacity (25%) for text readability
   - All components must have blending/merging effects between adjacent glass elements
4. Implement responsive breakpoints ensuring glass materials properly obscure underlying content at all sizes
5. Create UI component library:
   - Buttons with proper glass implementation (16-20px blur, rounded corners, adaptive tinting)
   - Cards and containers with 15-25% opacity, 20px blur, 24px radius
   - All components must use glass materials exclusively - no solid backgrounds
   - Proper layering hierarchy with content visible through multiple glass layers
6. Add GSAP or Framer Motion for glass-appropriate animations respecting the material properties. All motion must work with glass blur and transparency effects.
7. Implement dynamic HTML/CSS-generated backgrounds for optimal glassmorphism showcase:
   - Create animated CSS gradients with soft, muted greyscale tones and very subtle color accents
   - Develop SVG geometric shapes with slow, gentle movement patterns
   - Build particle-like elements using CSS transforms for depth enhancement
   - Ensure 60-70% negative space to allow glass components to float properly
   - Implement theme-adaptive background system that responds to light/dark mode
   - All animations must be subtle and slow (parallax effects, soft gradient transitions)
   - Background motion should complement 20px blur without creating visual competition
   - No static images - all backgrounds must be dynamically generated for performance and theme-awareness
8. Background implementation requirements:
   - Primary palette: Greyscale with occasional soft color touches
   - Animation speed: Very slow and gentle to enhance depth perception
   - Ensure backgrounds work seamlessly with existing glass blur effects
   - Test visual hierarchy - backgrounds must never compete with glass UI elements
   - Optimize performance for smooth animations alongside backdrop-filter effects
9. CSS Specificity and Targeting Strategy:
   - Use `html[data-theme='dark']` targeting for higher specificity
   - Apply `!important` declarations where needed to override conflicting styles
   - Ensure proper cascade order in CSS files
   - Test specificity conflicts and resolve with targeted selectors
10. Implementation follows complexity-based order: Foundation → Layout Primitives → Components → Advanced Effects → Validation

# Test Strategy:
1. Test glass materials properly show background content through with 15-25% opacity and 20px blur
2. Verify low opacity levels (15-25%) create true transparency, not opaque panels
3. Test rounded corners (24px) render correctly on all glass elements
4. Validate soft drop shadows and inner highlights create proper depth perception
5. Ensure blending/merging effects work between adjacent glass elements
6. Test adaptive tinting responds appropriately to underlying content
7. Verify proper layering hierarchy: content → glass controls/containers → overlays
8. Confirm CSS specificity targeting works correctly with html[data-theme] selectors
9. Test that blur effects create proper text contrast and readability
10. Verify glassmorphism effects are GPU-accelerated with no performance issues
11. Validate implementation order minimizes rework and allows parallel development

# Subtasks:
## 1. Tailwind CSS Custom Configuration for Liquid Glass [pending]
### Dependencies: None
### Description: Extend Tailwind CSS to support glassmorphism by adding custom utilities for blur, opacity, border, and color overlays. Integrate custom theme tokens and ensure compatibility with Astro and Strapi 5.
### Details:
Update tailwind.config.js to include custom blur levels (e.g., 1px, 2px), semi-transparent color palettes, and border utilities. Add plugin for backdrop-filter support. Test with Astro's build pipeline and ensure Strapi-driven content renders with the new classes.

## 2. CSS Variable Setup for Design Tokens [pending]
### Dependencies: 2.1
### Description: Define CSS variables for core design tokens: color, spacing, radius, blur, and shadow, supporting both light and dark modes.
### Details:
Create :root and [data-theme] selectors for tokens. Ensure variables are referenced in Tailwind config and custom CSS. Document all tokens for design consistency and future scalability.

## 3. Creation of Glass Material Utility Classes [pending]
### Dependencies: 2.1, 2.2
### Description: Develop reusable utility classes for glass effects, including multi-layered backgrounds, inner shadows, and adaptive tints.
### Details:
Implement a three-layer approach using pseudo-elements for depth, backdrop-filter for blur, and SVG noise overlays for organic distortion. Ensure classes are composable and can be applied to any component.

## 4. Responsive Layout Primitives [pending]
### Dependencies: 2.1, 2.2
### Description: Build responsive grid and flexbox primitives for section, container, and card layouts, optimized for glassmorphism and spatial depth.
### Details:
Create Tailwind-based layout utilities with adaptive padding, margin, and gap. Ensure layouts support dynamic content from Strapi and maintain glass layering integrity across breakpoints.

## 5. Dynamic Background Generation [pending]
### Dependencies: 2.2, 2.3
### Description: Develop dynamic, generative backgrounds (e.g., SVG noise, gradients, animated patterns) that enhance glass effects and support punk-meets-professional branding.
### Details:
Integrate SVG or Canvas-based noise overlays, animated gradients, and responsive scaling. Ensure backgrounds are performant and do not interfere with content legibility. Implement as foundation for glass effects before component development.

## 6. Navigation, Footer, and Header Components [pending]
### Dependencies: 2.3, 2.4, 2.5
### Description: Design and implement core navigation, footer, and header components with glassmorphic styling and accessibility best practices.
### Details:
Use glass utility classes for backgrounds, ensure semantic HTML, keyboard navigation, and ARIA roles. Integrate dynamic content from Strapi for menus and site metadata.

## 7. Mobile Menu Implementation [pending]
### Dependencies: 2.6
### Description: Develop a mobile-first, accessible menu with glassmorphic overlays, animated transitions, and touch-friendly controls.
### Details:
Implement slide/fade animations, focus management, and backdrop blur. Test for screen reader compatibility and ensure menu state is managed via Astro/React state or vanilla JS.

## 8. Blending and Merging Effects [pending]
### Dependencies: 2.3, 2.4, 2.5
### Description: Create advanced blending modes and merging effects for overlapping glass layers, simulating depth and light refraction.
### Details:
Use mix-blend-mode, background-blend-mode, and layered opacity. Test effects on various backgrounds and ensure performance does not degrade on lower-end devices.

## 9. Adaptive Tinting and Dynamic Color Modes [pending]
### Dependencies: 2.2, 2.3, 2.8
### Description: Implement adaptive tinting for glass layers based on background content and user-selected color modes (light/dark/custom).
### Details:
Use CSS variables and prefers-color-scheme media queries. Add logic to adjust tint opacity and hue for optimal contrast and readability.

## 10. Glass-Specific Animations [pending]
### Dependencies: 2.3, 2.6, 2.7
### Description: Design and implement subtle, performant animations for glass elements, such as hover glows, focus rings, and entrance transitions.
### Details:
Use CSS transitions and keyframes for blur, opacity, and shadow. Ensure animations respect user preferences (prefers-reduced-motion) and do not impact accessibility.

## 11. Accessibility Implementation and Testing [pending]
### Dependencies: 2.6, 2.7, 2.9, 2.10
### Description: Ensure all components meet WCAG 2.2 AA standards, including color contrast, keyboard navigation, ARIA labeling, and focus visibility.
### Details:
Conduct manual and automated accessibility audits. Test with screen readers and keyboard-only navigation. Document accessibility features and known limitations.

## 12. Cross-Browser Testing and Visual QA [pending]
### Dependencies: 2.3, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11
### Description: Perform comprehensive cross-browser and device testing, including Safari, Chrome, Firefox, Edge, and mobile browsers. Conduct visual QA for glass effects, layering, and performance.
### Details:
Use BrowserStack or similar tools for device coverage. Validate visual consistency, blur rendering, and fallback styles. Profile performance and optimize for AWS deployment. Document and resolve all visual bugs.


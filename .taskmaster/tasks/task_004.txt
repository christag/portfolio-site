# Task ID: 4
# Title: Implement Dynamic Services Page ('I Can')
# Status: pending
# Dependencies: 2, 5
# Priority: medium
# Description: Build the 'I Can' services page powered by Strapi CMS, displaying all consulting services with tiered pricing, descriptions, feature highlights, and contact CTAs. The page must reflect a bold, punk-meets-professional partnership, supporting filtering, sorting, pinning/highlighting, and direct links to service detail pages.
# Details:
1. Update Strapi content model for Service:
   - Fields: id, title, category/type, description, featureHighlights[], tiers[{name, priceLow, priceHigh, deliverables}], contactMethod, isPinned, slug
   - Ensure model supports transparent, empowering service descriptions and privacy/security best practices
2. Remove all static/hard-coded service data from the frontend
3. Implement a dynamic, filterable, and sortable grid/list of services
   - Filter by service type, tier, and price range
   - Sort by title, price, or custom order
   - Highlight/pin services as set in CMS
   - Ensure all controls are accessible and easy for non-technical users
   - Use asymmetric, print-style grid with deliberate misalignment and punk/brutalist accents
4. Each service card links to a dedicated detail page
5. Service detail page displays full info, pricing, features, and CTA, with bold, direct messaging and punk-inspired micro-interactions
6. Add structured data for SEO (Schema.org ServiceOffering) dynamically
7. Ensure responsive, accessible, and privacy-respecting design throughout, with theme toggles and high-contrast color options

# Test Strategy:
1. Verify all services display dynamically from Strapi, with accessible, bold descriptions
2. Test filtering and sorting by type, tier, and price, ensuring controls are usable by all
3. Validate pin/highlight logic from CMS and its accessibility
4. Confirm each service has a working detail page with correct, transparent data
5. Test CTA functionality (mailto, Calendly, etc.) for clarity and empowerment
6. Check structured data using Google's Rich Results Test
7. Test responsive, asymmetric layout and accessibility compliance, prioritizing founders and non-technical leaders

# Subtasks:
## 1. Define Strapi Content Model for Services [pending]
### Dependencies: None
### Description: Design and implement a Strapi v5 content model to represent services, including fields for title, description, tiered pricing, images, categories, tags, and SEO metadata. Ensure the model supports dynamic content and relationships for filtering and detail pages.
### Details:
Deliverables: Strapi content type with all required fields and relations. Technical specs: Use Strapi v5 best practices for field types, localization, and validation. Testing: Validate content creation, editing, and API output via Strapi admin and REST/GraphQL endpoints.

## 2. Develop Service Card Component in Astro [pending]
### Dependencies: 4.1
### Description: Create a reusable Astro component to display service information using glassmorphism and punk-meets-professional design. Include micro-interactions, accessible markup, and support for dynamic data from Strapi.
### Details:
Deliverables: Astro component with props for service data. Technical specs: Use semantic HTML, ARIA attributes, and modern CSS (e.g., backdrop-filter, gradients). Testing: Visual regression, keyboard navigation, and screen reader compatibility.

## 3. Implement Dynamic Grid/List Layout [pending]
### Dependencies: 4.2
### Description: Build a responsive grid/list layout in Astro to display service cards, supporting both desktop and mobile breakpoints. Integrate with the service card component and ensure smooth transitions and accessibility.
### Details:
Deliverables: Astro page/section with dynamic layout. Technical specs: Use CSS Grid/Flexbox, container queries, and prefers-color-scheme. Testing: Cross-device rendering, accessibility checks, and performance profiling.

## 4. Set Up Dynamic Routing and Service Detail Pages [pending]
### Dependencies: 4.1, 4.2
### Description: Configure Astro's file-based routing to generate dynamic service detail pages from Strapi data. Each page should display full service details, tiered pricing, and related services, with SEO-friendly URLs.
### Details:
Deliverables: Dynamic [slug].astro pages. Technical specs: Use Astro's getStaticPaths/getStaticProps, canonical URLs, and Open Graph tags. Testing: Route generation, 404 handling, and deep linking.

## 5. Add Tiered Pricing and Filtering Logic [pending]
### Dependencies: 4.1, 4.3
### Description: Implement logic in Astro to display tiered pricing (e.g., basic, pro, enterprise) and enable filtering by category, price, and tags. Ensure filtering is accessible and performant, using client-side or server-side rendering as appropriate.
### Details:
Deliverables: Filtering UI and pricing display. Technical specs: Use Astro's partial hydration for interactive filters, ARIA live regions for updates, and Strapi API queries for filtered data. Testing: Filter accuracy, pricing display, and accessibility.

## 6. Design and Implement Caching Strategy [pending]
### Dependencies: 4.1, 4.3, 4.4
### Description: Develop a caching strategy for service data and images using Astro's static generation, incremental builds, and AWS CloudFront CDN. Ensure cache invalidation on content updates.
### Details:
Deliverables: Configured caching for static assets and API data. Technical specs: Astro build hooks, HTTP cache headers, and AWS CDN settings. Testing: Cache hit/miss rates, update propagation, and CDN performance.

## 7. Ensure Responsive and Accessible Design [pending]
### Dependencies: 4.2, 4.3, 4.5, 4.4
### Description: Audit and enhance all components and layouts for WCAG 2.2 AA accessibility and full responsiveness. Include keyboard navigation, focus management, color contrast, and ARIA support.
### Details:
Deliverables: Accessibility-compliant, responsive UI. Technical specs: Use prefers-reduced-motion, semantic HTML, and CSS media queries. Testing: Axe, Lighthouse, and manual screen reader/keyboard tests.

## 8. Implement SEO and Structured Data [pending]
### Dependencies: 4.4
### Description: Add dynamic meta tags, Open Graph, Twitter cards, and JSON-LD structured data to service pages using Astro SEO best practices. Ensure sitemap and robots.txt are generated and up-to-date.
### Details:
Deliverables: SEO metadata and structured data on all relevant pages. Technical specs: Use Astro SEO integrations, dynamic metadata, and schema.org Service markup. Testing: Lighthouse SEO audits, Google Rich Results test, and sitemap validation.

## 9. Integrate Robust Error Handling [pending]
### Dependencies: 4.3, 4.5, 4.4, 4.6
### Description: Implement error boundaries and user-friendly error states for data fetching, routing, and UI rendering. Ensure errors are logged and surfaced appropriately for both users and developers.
### Details:
Deliverables: Error boundary components and fallback UIs. Technical specs: Astro error handling patterns, logging to AWS CloudWatch, and graceful degradation. Testing: Simulate API failures, network errors, and invalid routes.

## 10. Conduct Integration and End-to-End Testing [pending]
### Dependencies: 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9
### Description: Develop integration and E2E tests covering the full dynamic services flow: content sync, filtering, routing, pricing, SEO, accessibility, and error handling. Use modern testing frameworks and CI/CD integration.
### Details:
Deliverables: Automated test suite with coverage reports. Technical specs: Use Playwright or Cypress for E2E, Jest for integration, and GitHub Actions for CI. Testing: All user journeys, edge cases, and regression scenarios.


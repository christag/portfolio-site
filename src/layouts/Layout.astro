---
import Navigation from '../components/navigation/Navigation.astro';
import Footer from '../components/footer/Footer.astro';
import DynamicBackground from '../components/DynamicBackground.astro';

export interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = 'Christopher Tagliaferro - Technology Consultant & Virtual CIO',
} = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <!-- Default meta tags -->
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <title>{title}</title>

    <!-- Enhanced SEO metadata from page-specific SEO component -->
    <slot name="head" />

    <!-- Early theme initialization to prevent flash -->
    <script is:inline>
      // Initialize theme before any rendering
      (function () {
        const theme = localStorage.getItem('theme') || 'light';
        if (theme === 'dark') {
          document.documentElement.setAttribute('data-theme', 'dark');
        }
      })();
    </script>

    <!-- Import styles in correct order -->
    <style>
      @import '../styles/variables.scss';
    </style>
  </head>
  <body class="min-h-screen" style="color: var(--color-text-primary, #171717);">
    <!-- Dynamic Animated Background -->
    <DynamicBackground
      intensity="medium"
      colorAccents={true}
      glitchEffects={true}
    />

    <Navigation currentPath={currentPath} />
    <main class="pt-20 pb-32 mobile-main">
      <slot />
    </main>
    <Footer />

    <!-- Mobile-specific layout fixes -->
    <style>
      /* MOBILE FIX: Adjust main content spacing for mobile */
      @media (max-width: 767px) {
        .mobile-main {
          padding-top: 4rem; /* Reduced for smaller mobile nav */
          padding-bottom: 6rem; /* Reduced for smaller mobile footer */
        }
      }

      @media (max-width: 479px) {
        .mobile-main {
          padding-top: 3.5rem;
          padding-bottom: 5rem; /* Further reduced for very compact footer */
        }
      }

      /* Ensure all content containers respect mobile boundaries */
      .content-wrapper,
      .container-fluid,
      .container-constrained {
        max-width: 100vw;
        overflow-x: hidden;
        box-sizing: border-box;
        padding-left: 1rem;
        padding-right: 1rem;
      }

      /* Prevent any element from creating horizontal overflow */
      * {
        box-sizing: border-box;
      }

      img,
      video,
      canvas,
      svg {
        max-width: 100%;
        height: auto;
      }

      /* Text containment for mobile */
      p,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      span,
      div {
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
      }

      /* Responsive typography */
      .text-responsive {
        font-size: clamp(1rem, 2.5vw, 1.25rem);
        line-height: 1.4;
      }

      .heading-responsive {
        font-size: clamp(1.5rem, 5vw, 3rem);
        line-height: 0.9;
        letter-spacing: -0.025em;
      }

      .display-responsive {
        font-size: clamp(2rem, 8vw, 6rem);
        line-height: 0.8;
        letter-spacing: -0.05em;
      }
    </style>

    <!-- Theme switching functionality -->
    <script>
      // Theme toggle functionality
      function toggleTheme() {
        const html = document.documentElement;
        const currentTheme = html.getAttribute('data-theme') || 'light';
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';

        html.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);

        // Dispatch custom event for components that need to react to theme changes
        window.dispatchEvent(
          new CustomEvent('themeChanged', { detail: { theme: newTheme } })
        );
      }

      // Make function globally available
      window.toggleTheme = toggleTheme;

      // Apply saved theme on page load
      document.addEventListener('DOMContentLoaded', function () {
        const savedTheme = localStorage.getItem('theme') || 'light';
        document.documentElement.setAttribute('data-theme', savedTheme);
      });
    </script>
  </body>
</html>

<style is:global>
  @import '../styles/variables.scss';
  @import '../styles/global.css';
  @import '../styles/utilities.scss';
</style>

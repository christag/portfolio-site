---
import Navigation from '../components/navigation/Navigation.astro';
import Footer from '../components/footer/Footer.astro';

export interface Props {
  title: string;
  description?: string;
}

const {
  title,
  description = 'Christopher Tagliaferro - Technology Consultant & Virtual CIO',
} = Astro.props;
const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>

    <!-- Early theme initialization to prevent flash -->
    <script is:inline>
      // Initialize theme before any rendering
      (function () {
        const theme = localStorage.getItem('theme') || 'light';
        if (theme === 'dark') {
          document.documentElement.setAttribute('data-theme', 'dark');
        }
      })();
    </script>

    <!-- Import styles in correct order -->
    <style>
      @import '../styles/variables.scss';
    </style>
  </head>
  <body
    class="min-h-screen"
    style="background: var(--glassmorphism-bg-light); color: var(--color-text-primary, #171717);"
  >
    <Navigation currentPath={currentPath} />
    <main class="pt-20 pb-32 mobile-main">
      <slot />
    </main>
    <Footer />

    <!-- Mobile-specific layout fixes -->
    <style>
      /* MOBILE FIX: Adjust main content spacing for mobile */
      @media (max-width: 767px) {
        .mobile-main {
          padding-top: 4rem; /* Reduced for smaller mobile nav */
          padding-bottom: 6rem; /* Reduced for smaller mobile footer */
        }
      }

      @media (max-width: 479px) {
        .mobile-main {
          padding-top: 3.5rem;
          padding-bottom: 5rem; /* Further reduced for very compact footer */
        }
      }

      /* Ensure all content containers respect mobile boundaries */
      .content-wrapper,
      .container-fluid,
      .container-constrained {
        max-width: 100vw;
        overflow-x: hidden;
      }
    </style>

    <!-- Glassmorphism Performance Manager -->
    <script>
      import {
        GlassPerformanceManager,
        glassUtils,
      } from '../components/utils/performance.js';

      // Initialize performance manager
      const initPerformance = () => {
        const manager = new GlassPerformanceManager();

        // DISABLED: This adds transforms that break fixed positioning
        // glassUtils.optimizeElements();

        // Log performance recommendations in development
        if (import.meta.env.DEV) {
          const recommendations = manager.getRecommendations();
          if (recommendations.length > 0) {
            console.group('🔍 Glass Performance Recommendations');
            recommendations.forEach((rec) => console.log(`• ${rec}`));
            console.groupEnd();
          }
        }

        // Make manager available globally for debugging
        if (import.meta.env.DEV) {
          window.glassPerformance = manager;
          window.glassUtils = glassUtils;
        }
      };

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initPerformance);
      } else {
        initPerformance();
      }
    </script>
  </body>
</html>

<style is:global>
  @import '../styles/variables.scss';
  @import '../styles/global.css';
  @import '../styles/utilities.scss';
</style>
